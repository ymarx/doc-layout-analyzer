version: '3.8'

services:
  # CPU 전용 서비스
  doc-analyzer-cpu:
    build:
      context: .
      dockerfile: Dockerfile
      target: base
    container_name: doc-analyzer-cpu
    volumes:
      - ./data/input:/app/data/input
      - ./data/output:/app/data/output
      - ./logs:/app/logs
      - ./config:/app/config
    environment:
      - PROCESSING_MODE=cpu
      - LOG_LEVEL=INFO
    ports:
      - "8000:8000"
    restart: unless-stopped
    command: python main.py --cpu-only

  # GPU 지원 서비스 (NVIDIA GPU 필요)
  doc-analyzer-gpu:
    build:
      context: .
      dockerfile: Dockerfile
      target: gpu-base
    container_name: doc-analyzer-gpu
    volumes:
      - ./data/input:/app/data/input
      - ./data/output:/app/data/output
      - ./logs:/app/logs
      - ./config:/app/config
    environment:
      - PROCESSING_MODE=gpu
      - CUDA_VISIBLE_DEVICES=0
      - LOG_LEVEL=INFO
    ports:
      - "8001:8000"
    restart: unless-stopped
    runtime: nvidia
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu]
    command: python main.py --gpu

  # Qdrant 벡터 데이터베이스 (선택사항)
  qdrant:
    image: qdrant/qdrant:v1.7.0
    container_name: qdrant
    ports:
      - "6333:6333"
      - "6334:6334"
    volumes:
      - qdrant_storage:/qdrant/storage
    environment:
      - QDRANT__SERVICE__HTTP_PORT=6333
      - QDRANT__SERVICE__GRPC_PORT=6334
    restart: unless-stopped

  # 개발 환경용 서비스 (라이브 코드 편집)
  doc-analyzer-dev:
    build:
      context: .
      dockerfile: Dockerfile
      target: base
    image: doc-analyzer:dev-latest
    container_name: doc-analyzer-dev
    volumes:
      - .:/app:rw  # 전체 소스코드 마운트 (라이브 편집)
      - ./data/input:/app/data/input:rw
      - ./data/output:/app/data/output:rw
      - ./logs:/app/logs:rw
      - shared_models:/app/data/models:rw
      # 제외할 디렉토리들
      - /app/.git
      - /app/venv
      - /app/__pycache__
      - /app/*.egg-info
    environment:
      - PROCESSING_MODE=auto
      - LOG_LEVEL=DEBUG
      - PYTHONPATH=/app/src
      - PYTHONUNBUFFERED=1
      - CUDA_VISIBLE_DEVICES=""  # 개발 환경은 CPU만
    ports:
      - "8002:8000"  # 개발 서버 포트
    networks:
      - doc-analyzer-net
    restart: "no"  # 개발용이므로 자동 재시작 안함
    stdin_open: true
    tty: true
    profiles:
      - dev  # 프로파일로 분리 (개발시에만 실행)
    command: ["/bin/bash"]

  # 로드 밸런서용 nginx (다중 인스턴스 운영 시)
  load-balancer:
    image: nginx:alpine
    container_name: doc-analyzer-lb
    ports:
      - "80:80"
    volumes:
      - ./config/nginx.conf:/etc/nginx/nginx.conf:ro
    networks:
      - doc-analyzer-net
    restart: unless-stopped
    profiles:
      - production
    depends_on:
      - doc-analyzer-cpu
    deploy:
      resources:
        limits:
          memory: 128M
          cpus: '0.2'
        reservations:
          memory: 64M
          cpus: '0.1'

# =============================================================================
# Docker Compose 사용법 가이드
# =============================================================================
#
# 기본 실행:
#   docker-compose up doc-analyzer-cpu
#
# GPU 버전 실행 (NVIDIA Docker 필요):
#   docker-compose up doc-analyzer-gpu
#
# 벡터 DB와 함께 실행:
#   docker-compose up doc-analyzer-cpu qdrant
#
# 개발 환경 실행:
#   docker-compose --profile dev up doc-analyzer-dev
#
# 프로덕션 환경 (로드밸런서 포함):
#   docker-compose --profile production up
#
# 모든 서비스 중지:
#   docker-compose down
#
# 볼륨과 함께 완전 정리:
#   docker-compose down -v --remove-orphans
#
# =============================================================================